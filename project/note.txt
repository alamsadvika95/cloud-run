UNTUK REDIS 
  npm i redis@3.1.2
-----------------------------------------------------------------------------------------------------------------
UNTUK CRUD API 
  //1
app.get('/', (req, res) => {
  res.send('Hello World');
});

//2
app.post("/crud", async (req, res) => {
  try {
    // destructuring object
    const username = req.body.username;
    const email = req.body.email;
    const image = req.file.path;

    // initialize models database 
    const newUser = new User({
      username,
      email,
      image
    }); 

    // await = menjalankan kode models user
    await newUser.save();

    // menampilkan newuser ketika di save postman 
    res.json(newUser);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("server error");
  }
});

//3 
app.get("/crud", async (req, res) => {
  try {
    const getAllUser = await User.findAll({});

    res.json(getAllUser);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("server error");
  }
});

app.get("/crud/:id", async (req, res) => {
  try {
    const id = req.params.id;

    const getUser = await User.findOne({
      where: { id: id }
    });

    res.json(getUser);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("server error");
  }
});

app.delete("/crud/:id", async (req, res) => {
  try {
    const id = req.params.id;

    const deleteUser = await User.destroy({
      where: { id: id }
    });

    await deleteUser;

    res.json("User berhasil di hapus");
  } catch (err) {
    console.error(err.message);
    res.status(500).send("server error");
  }
});

--------------------------------------------------------------------------------------------------------------------------------------